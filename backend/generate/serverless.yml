org: rafaelram
service: generate-service

package:
  individually: true
  patterns:
    - '!layers/**'
    - '!node_modules/**'
    - '!*.zip'
    - '!*.tar.gz'
    - '!__pycache__/**'
    - '!.git/**'
    - '!.vscode/**'
    - '!*.md'

provider:
  name: aws
  runtime: python3.11
  memorySize: 1024
  timeout: 29
  stage: ${opt:stage, 'dev'}
  iam:
    role: arn:aws:iam::582232142172:role/LabRole
  environment:
    TOKENS_TABLE: h_tokens_access
    DIAGRAMS_TABLE: h_diagrams
    BUCKET: diagramas-hackacloud-${self:provider.stage}
    JWT_SECRET: mi-secreto-super-seguro-hackacloud 


functions:
  preview:
    handler: handler_preview.lambda_handler
    package:
      patterns:
        - handler_preview.py
        - parser_json.py
        - auth_utils.py
    events:
      - http:
          path: /generate/preview
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Tenant-Id

  save-frontend:
    handler: handler_save_frontend.lambda_handler
    package:
      patterns:
        - handler_save_frontend.py
        - auth_utils.py
    events:
      - http:
          path: /generate/save-frontend
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Tenant-Id

  history:
    handler: handler_history.lambda_handler
    package:
      patterns:
        - handler_history.py
        - auth_utils.py
    events:
      - http:
          path: /generate/history
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Tenant-Id

  load-code:
    handler: handler_load_code.lambda_handler
    package:
      patterns:
        - handler_load_code.py
        - auth_utils.py
    events:
      - http:
          path: /generate/load-code
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Tenant-Id

  list-s3:
    handler: handler_list_s3.lambda_handler
    package:
      patterns:
        - handler_list_s3.py
    events:
      - http:
          path: /generate/list-s3
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type

resources:
  Resources:
    # Tabla de Digramas
    DiagramsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: h_diagrams
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: diagram_id
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: diagram_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST 
    # Bucket de Diagramas
    DiagramsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: diagramas-hackacloud-${self:provider.stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerPreferred

    # Política del bucket para acceso público de lectura
    DiagramsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref DiagramsBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::diagramas-hackacloud-${self:provider.stage}/*"